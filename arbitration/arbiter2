module arbiter(
    req, grant,frame,clk,irdy, trdy, devsel
);
input frame,clk;

input[3:0] req;
wire [2:0] state;
output reg[3:0] grant;
State_Machine sm (frame, irdy, trdy, devsel, state, clk);
parameter[2:0] 
/* phases are four; 
1. idle : bus is free.
2. address : address only valid for one cycle.
3. data wait : bus is on hold as any of #RDY signals are deasserted (no transaction occurs).
4. data : transaction occurs.
5. final : final transaction occurs then bus waits for initiator to deassert IRDY.
*/
idle=0, address=1, data_wait=2, data=3, final=4;

always @(posedge clk) begin
    if (~req[0]&&frame&&(state== idle)) begin
        grant <= 4'b1110;
    end else if(~req[1]&&frame&&(state== idle)) begin
        grant <= 4'b1101;
    end else if(~req[2]&&frame&&(state== idle)) begin
        grant <= 4'b1011;
    end else if(~req[3]&&frame&&(state== idle)) begin
        grant <= 4'b0111;
    end else begin
        grant <= 4'b1111;
    end
end

endmodule // arbiter
