$date
	Sun Dec 23 22:56:27 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1us
$end
$scope module test $end
$var wire 32 ! d [31:0] $end
$var wire 1 " trdy $end
$var wire 1 # req $end
$var wire 1 $ irdy $end
$var wire 1 % frame $end
$var wire 1 & devsel $end
$var wire 4 ' C_BE [3:0] $end
$var reg 4 ( BE [3:0] $end
$var reg 2 ) address [1:0] $end
$var reg 1 * clk $end
$var reg 32 + dat [31:0] $end
$var reg 1 , force_req $end
$var reg 1 - gnt $end
$var reg 1 . rd_wr $end
$scope module device $end
$var wire 32 / AD [31:0] $end
$var wire 4 0 BE [3:0] $end
$var wire 1 * clk $end
$var wire 2 1 devaddress [1:0] $end
$var wire 1 , force_req $end
$var wire 1 - gnt $end
$var wire 1 . rd_wr $end
$var wire 32 2 write_data [31:0] $end
$var wire 1 " trdy $end
$var wire 3 3 state [2:0] $end
$var wire 1 # req $end
$var wire 1 $ irdy $end
$var wire 1 4 fvalid $end
$var wire 1 % frame $end
$var wire 1 5 ffinished $end
$var wire 1 6 fend_count $end
$var wire 1 7 fcount $end
$var wire 1 & devsel $end
$var wire 4 8 C_BE [3:0] $end
$scope module ic $end
$var wire 32 9 AD [31:0] $end
$var wire 4 : BE [3:0] $end
$var wire 1 * clk $end
$var wire 2 ; devaddress [1:0] $end
$var wire 1 , force_req $end
$var wire 32 < mem1 [31:0] $end
$var wire 32 = mem2 [31:0] $end
$var wire 32 > mem3 [31:0] $end
$var wire 32 ? mem4 [31:0] $end
$var wire 1 . rd_wr $end
$var wire 32 @ write_data [31:0] $end
$var wire 3 A state [2:0] $end
$var wire 1 # req $end
$var wire 1 $ irdy $end
$var wire 1 4 fvalid $end
$var wire 1 % frame $end
$var wire 1 5 ffinished $end
$var wire 1 6 fend_count $end
$var wire 1 7 fcount $end
$var wire 4 B C_BE [3:0] $end
$var reg 1 C bus_is_mine $end
$var reg 4 D command [3:0] $end
$var reg 2 E counter [1:0] $end
$var reg 3 F mp [2:0] $end
$upscope $end
$scope module sm $end
$var wire 1 * clk $end
$var wire 1 , force_req $end
$var wire 1 % frame $end
$var wire 1 - gnt $end
$var wire 1 $ irdy $end
$var wire 1 . rd_wr $end
$var wire 1 # req $end
$var wire 1 " trdy $end
$var wire 1 & devsel $end
$var reg 1 7 fcount $end
$var reg 1 6 fend_count $end
$var reg 1 5 ffinished $end
$var reg 1 G fgnt $end
$var reg 1 4 fvalid $end
$var reg 3 H next_state [2:0] $end
$var reg 3 I state [2:0] $end
$upscope $end
$scope module tc $end
$var wire 32 J AD [31:0] $end
$var wire 4 K C_BE [3:0] $end
$var wire 1 * clk $end
$var wire 1 4 fvalid $end
$var wire 3 L state [2:0] $end
$var wire 1 " trdy $end
$var wire 1 & devsel $end
$var reg 32 M add [31:0] $end
$var reg 4 N command [3:0] $end
$var reg 32 O memory [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx O
bx N
bx M
b0 L
bz K
bz J
b0 I
b0 H
0G
bx F
bx E
bx D
xC
bz B
b0 A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bz 9
bz 8
x7
x6
x5
x4
b0 3
bx 2
bx 1
bx 0
bz /
1.
1-
0,
bx +
0*
bx )
bx (
bz '
z&
x%
z$
x#
z"
bz !
$end
#1
1*
#2
0*
#3
1*
#4
z%
1#
0C
17
06
b0 E
0*
b1011 (
b1011 0
b1011 :
b10111011101110111101111110111011 +
b10111011101110111101111110111011 2
b10111011101110111101111110111011 @
b1 )
b1 1
b1 ;
1,
#5
b10111011101110111101111110111011 <
b1 D
b0 F
1*
#6
b1 E
0*
b1 (
b1 0
b1 :
b10101010101010101010101010101010 +
b10101010101010101010101010101010 2
b10101010101010101010101010101010 @
#7
b10101010101010101010101010101010 =
1*
#8
b10 E
0*
b100 (
b100 0
b100 :
b10111011101110111101111110111011 +
b10111011101110111101111110111011 2
b10111011101110111101111110111011 @
#9
b10111011101110111101111110111011 >
1*
#10
0#
16
07
b11 E
0*
bz (
bz 0
bz :
bz +
bz 2
bz @
bz )
bz 1
bz ;
0,
#11
1*
#12
b1 H
1G
0*
0-
#13
1*
#14
b10 H
0%
b1 '
b1 8
b1 B
b1 K
b1 !
b1 /
b1 9
b1 J
1C
b1 3
b1 A
b1 I
b1 L
0*
#15
b1 N
b1 M
1*
#16
1&
1"
0$
bz '
bz 8
bz B
bz K
bz !
bz /
bz 9
bz J
b11 H
05
b10 3
b10 A
b10 I
b10 L
0*
#17
1*
#18
0&
0"
b10101010101010101010101010101010 !
b10101010101010101010101010101010 /
b10101010101010101010101010101010 9
b10101010101010101010101010101010 J
b1011 '
b1011 8
b1011 B
b1011 K
14
b11 3
b11 A
b11 I
b11 L
0*
#19
b10101010101010101010101010101010 <
1*
#20
b1 '
b1 8
b1 B
b1 K
b1 F
b10 E
0*
#21
1*
#22
b100 '
b100 8
b100 B
b100 K
b10 F
b100 H
1#
1%
b1 E
0*
#23
b10101010101010101010101010101010 >
1*
#24
1$
1&
1"
bz !
bz /
bz 9
bz J
z%
bz '
bz 8
bz B
bz K
b0 H
b100 3
b100 A
b100 I
b100 L
b11 F
b0 E
0*
#25
1*
#26
z&
z"
z$
0C
15
b0 3
b0 A
b0 I
b0 L
0*
#27
b0 F
1*
#28
0*
#29
1*
#30
0*
#31
1*
#32
0*
#33
1*
#34
0*
#35
1*
#36
0*
#37
1*
#38
0*
#39
1*
#40
0*
#41
1*
#42
0*
