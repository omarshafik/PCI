$date
	Thu Dec 27 00:51:16 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1us
$end
$scope module test $end
$var wire 4 ! C_BE [3:0] $end
$var wire 32 " d [31:0] $end
$var wire 1 # devsel $end
$var wire 1 $ frame $end
$var wire 1 % irdy $end
$var wire 1 & trdy $end
$var wire 1 ' reqB $end
$var wire 1 ( reqA $end
$var reg 4 ) BE_A [3:0] $end
$var reg 4 * BE_B [3:0] $end
$var reg 2 + addressA [1:0] $end
$var reg 2 , addressB [1:0] $end
$var reg 1 - burstA $end
$var reg 1 . burstB $end
$var reg 1 / clk $end
$var reg 32 0 datA [31:0] $end
$var reg 32 1 datB [31:0] $end
$var reg 1 2 force_reqA $end
$var reg 1 3 force_reqB $end
$var reg 1 4 gntA $end
$var reg 1 5 gntB $end
$var reg 1 6 rd_wrA $end
$var reg 1 7 rd_wrB $end
$var reg 1 8 reset_add $end
$var reg 1 9 rframe $end
$scope module deviceA $end
$var wire 32 : AD [31:0] $end
$var wire 4 ; BE [3:0] $end
$var wire 4 < C_BE [3:0] $end
$var wire 1 - burst $end
$var wire 1 / clk $end
$var wire 2 = devaddress [1:0] $end
$var wire 1 # devsel $end
$var wire 1 2 force_req $end
$var wire 1 $ frame $end
$var wire 1 4 gnt $end
$var wire 1 % irdy $end
$var wire 1 6 rd_wr $end
$var wire 1 8 reset_address $end
$var wire 1 & trdy $end
$var wire 32 > write_data [31:0] $end
$var wire 3 ? state [2:0] $end
$var wire 1 ( req $end
$var wire 1 @ fvalid $end
$var wire 1 A ffinished $end
$var wire 1 B fend_count $end
$var wire 1 C fcount $end
$var wire 1 D fburst $end
$var wire 1 E bus_is_mine $end
$var reg 2 F tar_add [1:0] $end
$scope module ic $end
$var wire 32 G AD [31:0] $end
$var wire 4 H BE [3:0] $end
$var wire 4 I C_BE [3:0] $end
$var wire 1 / clk $end
$var wire 4 J comm [3:0] $end
$var wire 2 K devaddress [1:0] $end
$var wire 1 2 force_req $end
$var wire 1 $ frame $end
$var wire 1 % irdy $end
$var wire 32 L mem1 [31:0] $end
$var wire 32 M mem10 [31:0] $end
$var wire 32 N mem2 [31:0] $end
$var wire 32 O mem3 [31:0] $end
$var wire 32 P mem4 [31:0] $end
$var wire 32 Q mem9 [31:0] $end
$var wire 1 6 rd_wr $end
$var wire 32 R write_data [31:0] $end
$var wire 3 S state [2:0] $end
$var wire 1 ( req $end
$var wire 1 @ fvalid $end
$var wire 1 A ffinished $end
$var wire 1 B fend_count $end
$var wire 1 C fcount $end
$var wire 1 D fburst $end
$var wire 1 E bus_is_mine $end
$var reg 2 T counter [1:0] $end
$var reg 3 U failed_counter [2:0] $end
$var reg 2 V max [1:0] $end
$var reg 3 W mp [2:0] $end
$upscope $end
$scope module sm $end
$var wire 1 - burst $end
$var wire 1 / clk $end
$var wire 1 # devsel $end
$var wire 1 2 force_req $end
$var wire 1 $ frame $end
$var wire 1 4 gnt $end
$var wire 1 % irdy $end
$var wire 1 X rd_wr $end
$var wire 1 ( req $end
$var wire 1 & trdy $end
$var reg 1 E bus_is_mine $end
$var reg 1 D fburst $end
$var reg 1 C fcount $end
$var reg 1 B fend_count $end
$var reg 1 A ffinished $end
$var reg 1 Y fgnt $end
$var reg 1 @ fvalid $end
$var reg 3 Z next_state [2:0] $end
$var reg 3 [ state [2:0] $end
$upscope $end
$scope module tc $end
$var wire 32 \ AD [31:0] $end
$var wire 4 ] C_BE [3:0] $end
$var wire 1 / clk $end
$var wire 1 # devsel $end
$var wire 1 $ frame $end
$var wire 1 @ fvalid $end
$var wire 32 ^ mem1 [31:0] $end
$var wire 32 _ mem2 [31:0] $end
$var wire 32 ` mem3 [31:0] $end
$var wire 32 a mem4 [31:0] $end
$var wire 3 b state [2:0] $end
$var wire 2 c tar_address [1:0] $end
$var wire 1 & trdy $end
$var reg 32 d add [31:0] $end
$var reg 4 e command [3:0] $end
$var reg 4 f mp [3:0] $end
$upscope $end
$upscope $end
$scope module deviceB $end
$var wire 32 g AD [31:0] $end
$var wire 4 h BE [3:0] $end
$var wire 4 i C_BE [3:0] $end
$var wire 1 . burst $end
$var wire 1 / clk $end
$var wire 2 j devaddress [1:0] $end
$var wire 1 # devsel $end
$var wire 1 3 force_req $end
$var wire 1 $ frame $end
$var wire 1 5 gnt $end
$var wire 1 % irdy $end
$var wire 1 7 rd_wr $end
$var wire 1 8 reset_address $end
$var wire 1 & trdy $end
$var wire 32 k write_data [31:0] $end
$var wire 3 l state [2:0] $end
$var wire 1 ' req $end
$var wire 1 m fvalid $end
$var wire 1 n ffinished $end
$var wire 1 o fend_count $end
$var wire 1 p fcount $end
$var wire 1 q fburst $end
$var wire 1 r bus_is_mine $end
$var reg 2 s tar_add [1:0] $end
$scope module ic $end
$var wire 32 t AD [31:0] $end
$var wire 4 u BE [3:0] $end
$var wire 4 v C_BE [3:0] $end
$var wire 1 / clk $end
$var wire 4 w comm [3:0] $end
$var wire 2 x devaddress [1:0] $end
$var wire 1 3 force_req $end
$var wire 1 $ frame $end
$var wire 1 % irdy $end
$var wire 32 y mem1 [31:0] $end
$var wire 32 z mem10 [31:0] $end
$var wire 32 { mem2 [31:0] $end
$var wire 32 | mem3 [31:0] $end
$var wire 32 } mem4 [31:0] $end
$var wire 32 ~ mem9 [31:0] $end
$var wire 1 7 rd_wr $end
$var wire 32 !" write_data [31:0] $end
$var wire 3 "" state [2:0] $end
$var wire 1 ' req $end
$var wire 1 m fvalid $end
$var wire 1 n ffinished $end
$var wire 1 o fend_count $end
$var wire 1 p fcount $end
$var wire 1 q fburst $end
$var wire 1 r bus_is_mine $end
$var reg 2 #" counter [1:0] $end
$var reg 3 $" failed_counter [2:0] $end
$var reg 2 %" max [1:0] $end
$var reg 3 &" mp [2:0] $end
$upscope $end
$scope module sm $end
$var wire 1 . burst $end
$var wire 1 / clk $end
$var wire 1 # devsel $end
$var wire 1 3 force_req $end
$var wire 1 $ frame $end
$var wire 1 5 gnt $end
$var wire 1 % irdy $end
$var wire 1 '" rd_wr $end
$var wire 1 ' req $end
$var wire 1 & trdy $end
$var reg 1 r bus_is_mine $end
$var reg 1 q fburst $end
$var reg 1 p fcount $end
$var reg 1 o fend_count $end
$var reg 1 n ffinished $end
$var reg 1 (" fgnt $end
$var reg 1 m fvalid $end
$var reg 3 )" next_state [2:0] $end
$var reg 3 *" state [2:0] $end
$upscope $end
$scope module tc $end
$var wire 32 +" AD [31:0] $end
$var wire 4 ," C_BE [3:0] $end
$var wire 1 / clk $end
$var wire 1 # devsel $end
$var wire 1 $ frame $end
$var wire 1 m fvalid $end
$var wire 32 -" mem1 [31:0] $end
$var wire 32 ." mem2 [31:0] $end
$var wire 32 /" mem3 [31:0] $end
$var wire 32 0" mem4 [31:0] $end
$var wire 3 1" state [2:0] $end
$var wire 2 2" tar_address [1:0] $end
$var wire 1 & trdy $end
$var reg 32 3" add [31:0] $end
$var reg 4 4" command [3:0] $end
$var reg 4 5" mp [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 5"
bx 4"
bx 3"
b0 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bz ,"
bz +"
bx *"
bx )"
0("
z'"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
b0 x
bx w
bz v
bx u
bz t
b0 s
xr
0q
xp
xo
xn
xm
bx l
bx k
b0 j
bz i
bx h
bz g
bx f
bx e
bx d
b1 c
bx b
bx a
bx `
bx _
bx ^
bz ]
bz \
bx [
bx Z
0Y
zX
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
b1 K
bx J
bz I
bx H
bz G
b1 F
xE
0D
xC
xB
xA
x@
bx ?
bx >
b1 =
bz <
bx ;
bz :
z9
18
07
06
15
14
03
02
bx 1
bx 0
0/
0.
0-
b0 ,
b1 +
bx *
bx )
1(
1'
z&
z%
z$
z#
bz "
bz !
$end
#1
b0 W
b0 V
b0 T
b0 Z
b0 )"
1/
b0 +
b0 =
b0 K
12
08
#2
b0 l
b0 ""
b0 *"
b0 1"
1C
0B
b0 ?
b0 S
b0 [
b0 b
0/
#3
b0 J
b0 M
0r
1m
0E
1@
1/
b1011 )
b1011 ;
b1011 H
b10101010101010101010101010101010 0
b10101010101010101010101010101010 >
b10101010101010101010101010101010 R
1-
04
02
#4
0(
1D
1Y
1B
0C
b0 U
b1 V
b1 T
b1 W
0/
#5
1$
1E
b1 Z
1/
#6
1%
0$
0X
0'"
b0 !
b0 <
b0 I
b0 ]
b0 i
b0 v
b0 ,"
b0 "
b0 :
b0 G
b0 \
b0 g
b0 t
b0 +"
b1 ?
b1 S
b1 [
b1 b
0/
#7
1#
1&
b0 5"
b0 4"
b0 3"
b11 )"
b11 Z
1/
#8
0%
0$
1X
1'"
0#
0&
b1011 !
b1011 <
b1011 I
b1011 ]
b1011 i
b1011 v
b1011 ,"
b10101010101010101010101010101010 "
b10101010101010101010101010101010 :
b10101010101010101010101010101010 G
b10101010101010101010101010101010 \
b10101010101010101010101010101010 g
b10101010101010101010101010101010 t
b10101010101010101010101010101010 +"
0A
b11 ?
b11 S
b11 [
b11 b
b0 W
b11 l
b11 ""
b11 *"
b11 1"
0/
#9
b10101010xxxxxxxx1010101010101010 -"
1/
#10
b1 5"
b0 $"
0/
#11
b10101010xxxxxxxx1010101010101010 ."
b0 &"
b0 %"
b0 #"
1/
05
b1 ,
b1 j
b1 x
13
0-
#12
1(
1$
0D
1("
1p
0o
b10 5"
0/
#13
b0 w
b1 z
b10101010xxxxxxxx1010101010101010 /"
b100 Z
b100 )"
1/
b1111 *
b1111 h
b1111 u
b10111011101110111011101110111011 1
b10111011101110111011101110111011 k
b10111011101110111011101110111011 !"
1.
03
#14
0'
1%
zX
z'"
z$
1#
1&
bz !
bz <
bz I
bz ]
bz i
bz v
bz ,"
bz "
bz :
bz G
bz \
bz g
bz t
bz +"
b11 5"
b1 &"
b1 %"
b1 #"
1q
1o
0p
b100 l
b100 ""
b100 *"
b100 1"
b100 ?
b100 S
b100 [
b100 b
0/
#15
z#
z&
bz 3"
bz d
b0 )"
b0 Z
1/
#16
z%
1A
b0 ?
b0 S
b0 [
b0 b
b0 T
1n
b0 l
b0 ""
b0 *"
b0 1"
0/
#17
1$
0E
1r
b1 )"
1/
#18
1%
0$
0X
0'"
b0 !
b0 <
b0 I
b0 ]
b0 i
b0 v
b0 ,"
b1 "
b1 :
b1 G
b1 \
b1 g
b1 t
b1 +"
b1 l
b1 ""
b1 *"
b1 1"
0/
#19
1#
1&
b0 f
b0 e
b1 d
b11 )"
b11 Z
1/
#20
0%
0$
0#
0&
1X
1'"
b1111 !
b1111 <
b1111 I
b1111 ]
b1111 i
b1111 v
b1111 ,"
b10111011101110111011101110111011 "
b10111011101110111011101110111011 :
b10111011101110111011101110111011 G
b10111011101110111011101110111011 \
b10111011101110111011101110111011 g
b10111011101110111011101110111011 t
b10111011101110111011101110111011 +"
b11 ?
b11 S
b11 [
b11 b
0n
b11 l
b11 ""
b11 *"
b11 1"
b0 &"
0/
#21
b10111011101110111011101110111011 ^
1/
0.
#22
1'
1$
0q
b1 f
0/
#23
b10111011101110111011101110111011 _
b100 )"
b100 Z
1/
#24
1%
zX
z'"
z$
1#
1&
bz !
bz <
bz I
bz ]
bz i
bz v
bz ,"
bz "
bz :
bz G
bz \
bz g
bz t
bz +"
b100 ?
b100 S
b100 [
b100 b
b10 f
b100 l
b100 ""
b100 *"
b100 1"
0/
#25
z#
z&
bz d
b0 Z
b0 )"
1/
#26
z%
b0 #"
1n
b0 l
b0 ""
b0 *"
b0 1"
b0 ?
b0 S
b0 [
b0 b
0/
#27
0r
1/
#28
0/
#29
1/
#30
0/
#31
1/
#32
0/
#33
1/
#34
0/
#35
1/
#36
0/
#37
1/
#38
0/
#39
1/
#40
0/
#41
1/
#42
0/
#43
1/
#44
0/
#45
1/
#46
0/
#47
1/
#48
0/
#49
1/
#50
0/
#51
1/
#52
0/
#53
1/
#54
0/
#55
1/
#56
0/
#57
1/
#58
0/
#59
1/
#60
0/
#61
1/
